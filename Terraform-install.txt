Terraform  installations

1.visual studio code
https://code.visualstudio.com/docs/?dv=win

2.install aws cli and terraform file in visual stuido code
a)HashiCorp Terraform
b)AWS CLI Configure

3)AWS user create with Admin (admin permissions)
vpc full acesses
s3
rds
ec2

4)Terraform pacakage install in windows
https://www.terraform.io/downloads

once package downloaded place the file under system32
C:\Windows\System32

5)Install awscli for windows
in linux : apt-get install awscli

https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html

Cmd: msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi

******************************************************************************************



Terraform files run
file

CREATE EC2 INSTANCE:


provider "aws" {
  region     = "us-east-2"
}

resource "aws_instance" "Demo" {
  ami           = "ami-097a2df4ac947655f"
  instance_type = "t2.micro"
  key_name = "terraform"
  tags = {
    Name = "Demo"
  }
}


terraform init
terraform plan
terraform apply
terraform destroy



provider "aws" {
  region     = "us-east-2"
}

resource "aws_instance" "Demo" {
  ami           = "ami-097a2df4ac947655f"
  instance_type = "t2.micro"
  key_name = "terraform"
  tags = {
    Name = "Demo"
  }
}


2nd scenerio: no. of 3 server
3rd scenerio : disk 15gb
securitygroup : test-sg
vpc


***********************************************************

#Create vpc for dev envi with 4 subnets


provider "aws" {
  region     = "us-east-2"
}


# Creating VPC,name, CIDR and Tags
resource "aws_vpc" "dev" {
  cidr_block           = "10.0.0.0/16"
  instance_tenancy     = "default"
  enable_dns_support   = "true"
  enable_dns_hostnames = "true"
  enable_classiclink   = "false"
  tags = {
    Name = "dev"
  }
}
# Creating Public Subnets in VPC
resource "aws_subnet" "dev-public-1" {
  vpc_id                  = aws_vpc.dev.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = "us-east-2a"
  tags = {
    Name = "dev-public-1"
  }
}
resource "aws_subnet" "dev-public-2" {
  vpc_id                  = aws_vpc.dev.id
  cidr_block              = "10.0.2.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = "us-east-2b"
  tags = {
    Name = "dev-public-2"
  }
}
# Creating Private Subnets in VPC
resource "aws_subnet" "dev-private-1" {
  vpc_id                  = aws_vpc.dev.id
  cidr_block              = "10.0.3.0/24"
  map_public_ip_on_launch = "false"
  availability_zone       = "us-east-2a"
  tags = {
    Name = "dev-private-1"
  }
}
resource "aws_subnet" "dev-private-2" {
  vpc_id                  = aws_vpc.dev.id
  cidr_block              = "10.0.4.0/24"
  map_public_ip_on_launch = "false"
  availability_zone       = "us-east-2b"
  tags = {
    Name = "dev-private-2"
  }
}
# Creating Internet Gateway in AWS VPC
resource "aws_internet_gateway" "dev-gw" {
  vpc_id = aws_vpc.dev.id
  tags = {
    Name = "dev"
  }
}
# Creating Route Tables for Internet gateway
resource "aws_route_table" "dev-public" {
  vpc_id = aws_vpc.dev.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.dev-gw.id
  }
  tags = {
    Name = "dev-public-1"
  }
}
# Creating Route Associations public subnets
resource "aws_route_table_association" "dev-public-1-a" {
  subnet_id      = aws_subnet.dev-public-1.id
  route_table_id = aws_route_table.dev-public.id
}
resource "aws_route_table_association" "dev-public-2-a" {
  subnet_id      = aws_subnet.dev-public-2.id
  route_table_id = aws_route_table.dev-public.id
}